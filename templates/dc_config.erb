#! /usr/bin/python
import time
from ovirtsdk.api import API
from ovirtsdk.xml import params

VERSION = params.Version(major='3', minor='5')

#=======Engine config=========== 
URL =	                 '<%= @url %>' #'https://localhost:443'
USERNAME =    	         '<%= @username %>' #'admin@internal'
PASSWORD =	         '<%= @password %>' #'redhat'
#=============================

#=======DC/Cluster config===========
DC_NAME = 	         '<%= @dc_name %>' #'my_datacenter'
CLUSTER_NAME = 		 '<%= @cluster_name %>' #'my_cluster'
HOST_NAME =    		 '<%= @host_name %>' #'my_host'
CPU_TYPE =	         '<%= @cpu_type %>' #'Intel Nehalem Family'
#=============================

#=======host config===========
HOST_ADDRESS =		 '<%= @host_address %>' #'192.168.112.218'
ROOT_PASSWORD =		 '<%= @root_password %>' #'redhat'
#=============================

#=======storage config===========
STORAGE_ADDRESS =	 '<%= @storage_address %>' #'192.168.0.101'
SHARE_PATH 	=	 '<%= @share_path%>' #'/usr/share/nfs/data2'
DATA_STORAGE_NAME = 	 '<%= @storage_name %>' #'my_storage'
ISO_STORAGE_NAME =	 'ISO_DOMAIN'
EXPORT_NAME =  		 '<%= @export_name %>' #'my_export'
STORAGE_TYPE =	 	 '<%= @storage_type %>' #'nfs'
#=============================


def waitVDSMHostUp( engine_api, host):
    ENGINE_RETRIES = 60
    ENGINE_DELAY = 5
    VDSM_RETRIES = 600
    VDSM_DELAY = 1
 
    tries = VDSM_RETRIES
    isUp = False
    while not isUp and tries > 0:
        tries -= 1
        try:
            state = engine_api.hosts.get(host).status.state
        except Exception as exc:
            print 'Error fetching host state: {error}'.format(error=str(exc),)
            state = ''
        if 'failed' in state:
            print 'The VDSM host was found in a failed state. '
            print 'Please check engine and bootstrap installation logs.'
            tries = -1  # Error state
        elif state == 'up':
            isUp = True
            print 'The VDSM Host is now operational'
        else:
            print 'VDSM host in {state} state'.format(state=state)
            if tries % 30 == 0:
                 print 'Still waiting for VDSM host to become operational...'
            time.sleep(VDSM_DELAY)
        if not isUp and tries == 0:
            print 'Timed out while waiting for host to start. '
            print 'Please check the logs.'
    return isUp

def createDataCenter(engine_api):
	try:
	    if engine_api.datacenters.add(params.DataCenter(name=DC_NAME, storage_type='nfs', version=VERSION,)):
		print 'NFS Data Center was created successfully'
	except Exception as e:
	    print 'Failed to create NFS Data Center:\n%s' % str(e)

def createCluster(engine_api):
	try:
	   if engine_api.clusters.add(params.Cluster(name=CLUSTER_NAME, cpu=params.CPU(id=CPU_TYPE), data_center=engine_api.datacenters.get(DC_NAME), version=VERSION)):
	       print 'Cluster was created successfully'
	except Exception as e:
	       print 'Failed to create Cluster:\n%s' % str(e)

def addHost(engine_api):
	try:
	    if engine_api.hosts.add(params.Host(name=HOST_NAME, address=HOST_ADDRESS, cluster=engine_api.clusters.get(CLUSTER_NAME), root_password=ROOT_PASSWORD)):
		waitVDSMHostUp( engine_api, HOST_NAME )
	except Exception as e:
	    print 'Failed to install Host:\n%s' % str(e)


def createDataStorageDomain(engine_api):
	sdParams = params.StorageDomain(name=DATA_STORAGE_NAME,
			  data_center=engine_api.datacenters.get(DC_NAME),
			  type_='data',
			  host=engine_api.hosts.get(HOST_NAME),
			  storage = params.Storage(   type_=STORAGE_TYPE,
									   address=STORAGE_ADDRESS,
									   path=SHARE_PATH  )  )

	try:
	    if engine_api.storagedomains.add(sdParams):
		print 'NFS Storage Domain was created successfully'
	except Exception as e:
	    print 'Failed to create %s Domain:\n%s' % (STORAGE_TYPE, str(e))

def attachStorageDomain(engine_api,storage_name):
	try:
	    if engine_api.datacenters.get(name=DC_NAME).storagedomains.add(engine_api.storagedomains.get(name=storage_name)):
		print '%s Domain was attached successfully' % storage_name
	except Exception as e:
	    print 'Failed to attach %s Domain:\n%s' % (storage_name, str(e))
	    exit(1)


engine_api = API(url=URL, username=USERNAME, password=PASSWORD,insecure=True)
#if @setup_dc:
createDataCenter(engine_api)
createCluster(engine_api)
addHost(engine_api)
createDataStorageDomain(engine_api)
attachStorageDomain(engine_api,DATA_STORAGE_NAME)
#attachStorageDomain(engine_api,ISO_STORAGE_NAME)
